name: BSC_release

on:
  push:
    tags:
      - '*'

jobs:
  job_bsc_release:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Cache pip
        uses: actions/cache@v4
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
          restore-keys: ${{ runner.os }}-pip-

      - name: Cache PlatformIO
        uses: actions/cache@v4
        with:
          path: ~/.platformio
          key: ${{ runner.os }}-platformio-2022-${{ hashFiles('**/lockfiles') }}

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.x'

      - name: Install PlatformIO
        run: |
          python -m pip install --upgrade pip
          pip install --upgrade platformio

      - name: Create folders
        run: |
          mkdir -p ./output_fw/bsc
          mkdir -p ./output_fw/bsc_serial_log

      - name: Prebuild Parameter
        run: python ./scripts/prebuild_parameter.py

      - name: Run githubCI.py
        run: python ./scripts/githubCI.py

      - name: Build & run native unit tests
        run: platformio test -e native_test

      - name: Build firmware
        run: platformio run -e bsc -e bsc_hw_log

      - name: Copy output
        run: |
          cp .pio/build/bsc/firmware.bin ./output_fw/bsc/
          cp .pio/build/bsc/firmware.elf ./output_fw/bsc/
          cp .pio/build/bsc/partitions.bin ./output_fw/bsc/
          cp .pio/build/bsc/bootloader.bin ./output_fw/bsc/
          cp ~/.platformio/packages/framework-arduinoespressif32/tools/partitions/boot_app0.bin ./output_fw/bsc/
          cp .pio/build/bsc_hw_log/firmware.bin ./output_fw/bsc_serial_log/
          cp .pio/build/bsc_hw_log/firmware.elf ./output_fw/bsc_serial_log/
          cp .pio/build/bsc_hw_log/partitions.bin ./output_fw/bsc_serial_log/
          cp .pio/build/bsc_hw_log/bootloader.bin ./output_fw/bsc_serial_log/
          cp ~/.platformio/packages/framework-arduinoespressif32/tools/partitions/boot_app0.bin ./output_fw/bsc_serial_log/

      - name: ZIP output for release
        run: |
          zip -j ./output_fw/bsc_release.zip ./output_fw/bsc/firmware.bin
          zip -j ./output_fw/bsc_release.zip ./output_fw/bsc/partitions.bin
          zip -j ./output_fw/bsc_release.zip ./output_fw/bsc/bootloader.bin
          zip -j ./output_fw/bsc_release.zip ./output_fw/bsc/boot_app0.bin

      - name: Get current date
        id: date
        run: echo "dt=$(date +'%Y-%m-%d-%H-%M')" >> $GITHUB_ENV

      - name: Rename ZIP
        run: mv ./output_fw/bsc_release.zip ./output_fw/bsc_release_${{ env.BSC_SW_VERSION }}_${{ env.dt }}.zip

      - name: Read file changes
        id: read_file_changes
        uses: andstor/file-reader-action@v1
        with:
          path: "changes.txt"

      - name: Create Release Files (only on MAIN branch)
        id: create_release
        uses: actions/create-release@v1
#        if: github.ref == 'refs/heads/main'
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }} # This token is provided by Actions, you do not need to create your own token
        with:
          tag_name: ${{ github.ref }}
#          release_name: ${{ env.BSC_SW_VERSION }}_${{ env.dt }}
          release_name: ${{ github.ref }}
          body: ${{ steps.read_file_changes.outputs.contents }}
          draft: false
          prerelease: false

      - name: Upload Release Asset
        id: upload-release-asset
        uses: actions/upload-release-asset@v1
#        if: github.ref == 'refs/heads/main'
        env:
          GITHUB_TOKEN: ${{secrets.GITHUB_TOKEN}}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./output_fw/bsc_release_${{ env.BSC_SW_VERSION }}_${{ env.dt }}.zip
#          asset_name: bsc_firmware_${{ env.BSC_SW_VERSION }}_${{ env.dt }}.zip
          asset_name: bsc_firmware.zip
          asset_content_type: application/zip

      - name: upload artifact
        id: upload-release-bin-file
        uses: actions/upload-release-asset@v1
#        if: github.ref == 'refs/heads/main'
        env:
          GITHUB_TOKEN: ${{secrets.GITHUB_TOKEN}}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./output_fw/bsc/firmware.bin
          asset_name: fw_bsc_ota.bin
          asset_content_type: application/octet-stream